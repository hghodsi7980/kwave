function [X, res, t] = bsplfit(x, p, u)

%     [Y, RES, T] = BSPLFIT(X, P, U) Returns the control points 'Y' of the
%     best-fitting Bézier curve of order 'P' to the points 'X' via NLLS. A
%     parameter 'RES' measures the goodness of fit at the nodes 'T' of the
%     projections of the data points to the curve. It is possible to parse
%     knot vector information in the parameter 'U' as it follows:
% 
%     - []         BSPLFIT(X)           Uses an affine-invariant spacing
%     - 0:         BSPLFIT(X, p, 0)     Uses an arc-length knot spacing
%     - 1:         BSPLFIT(X, p, 1)	    Uses a uniform knot distribution
%     - N:         BSPLFIT(X, p, N)     'N' iterations for minimum length
%     - V:         BSPLFIT(X, p, V)	    Uses the knot values in 'V'


    % Initialise variables
    n = size(x, 1);
    
    if ~exist('p', 'var') || isempty(p)
        p = n - 1;
    end
    if ~exist('u', 'var') || isempty(u)
        
        % Obtain inverse covariance matrix
        i = mean(x);
        i = diag(i);
        i = (0 * x + 1) * i;
        i = x - i;
        i = i' * i;
        i = i / n;

        % Get spacing of consecutive pairs
        j = diff(x);
        j = j / i * j';
        j = diag(j);
        j = sqrt(j);

        % Get area of consecutive triplets
        b = 2 : n - 1;
        c = x(b + 1, :) - x(b - 1, :);
        c = c / i * c';
        c = diag(c);

        % Obtain twiswing angles
        i = j .* j;
        i = i(b - 1) + i(b);
        i = i - c;
        i = 0.5 * i;
        i = i ./ j(b - 1);
        i = i ./ j(b);
        i = acos(i);
        i = real(i);
        i = pi - i;
        i(i > pi / 2) = pi / 2;

        % Project spacing values
        c = j(b - 1) + j(b);
        b(n - 2) = [];
        t(n - 1, 1) = i(n - 2) * j(n - 2) / c(n - 2);
        t(1) = i(1) * j(2) / c(1);
        t(b) = i(b) .* j(b + 1) ./ c(b);
        t(b) = t(b) + i(b - 1) .* j(b - 1) ./ c(b - 1);
        
        % Normalise cumulative distribution
        t = 1.5 * t;
        t = 1 + t;
        t = j .* t;
        t = cumsum(t);
        t = [0; t];
        t = t / t(n);
        
    elseif length(u) == n
        
        t = double(u(:));
        t = t - min(t);
        t = t / max(t);
        
    elseif u == 0
        
        t = diff(x);
        t = t .* t;
        t = sum(t, 2);
        t = sqrt(t);
        t = cumsum(t);
        t = [0; t];
        t = t / t(n);
        
    elseif u == 1
        
        t = (0 : 1 / (n - 1) : 1);
        t = t';
        
    % Interative approach    
    else
        
        % Initialise parameters
        warning('off','all')
        a = max(1e4, 10 * n * n);
        
        % Affine-invariant initialisation
        [X, res, t] = bsplfit(x, p);
        m = bspl(X, a);
        m = diff(m);
        m = m .* m;
        m = sum(m, 2);
        m = sqrt(m);
        m = sum(m);
        
        % Arc-length check
        [z, r, v] = bsplfit(x, p, 0);
        b = bspl(z, a);
        b = diff(b);
        b = b .* b;
        b = sum(b, 2);
        b = sqrt(b);
        b = sum(b);
        if b < m
            m = b;
            X = z;
            t = v;
            res = r;
        end

        % Uniform check
        [z, r, v] = bsplfit(x, p, 1);
        b = bspl(z, a);
        b = diff(b);
        b = b .* b;
        b = sum(b, 2);
        b = sqrt(b);
        b = sum(b);
        if b < m
            m = b;
            X = z;
            t = v;
            res = r;
        end
        
        % Iterate
        for i = 1 : u

            % Generate random knots
            u = rand(n, 1);
            u = sort(u);

            % Get control points
            [z, r, u] = bsplfit(x, p, u);

            % Calculate arc length
            b = bspl(z, a);
            b = diff(b);
            b = b .* b;
            b = sum(b, 2);
            b = sqrt(b);
            b = sum(b);

            % Update best result
            if b < m
                m = b;
                X = z;
                t = u;
                res = r;
            end
        end
        return
    end
    if p > n - 1
        s = p - n;
        p = n - 1;
    else
        s = false;
    end
    a = p - 1;
    b = p + 1;
    c = a - 1;
    
    % Solver Parameters
    tol = 1e-4;
    maxiter = 1e3;
    
    % Operation within 'double' floating-point precision
    if p < 58
        
        % Recursive sums (Pascal)
        if p < 12
            b0 = pas(b);
            b1 = b0(p, 1 : p);
            b0 = b0(b, 1 : b);
            
        % Nested products
        elseif p < 38
            b0 = nes(p);
            b1 = nes(a);
            
        % Look-up table
        else
            b0 = lut(b);
            b1 = lut(p);
        end
        
        % Linear transformation to avoid overflows
        y = max(x);
        if n * max(b0) * y < flintmax
            y = 1;
        end
        x = x / y;
        
        % Get exponent vectors
        u0 = 0 : p;
        v0 = p : -1 : 0;
        u1 = 0 : a;
        v1 = a : -1 : 0;
        
        % Initialise Bernstein Matrix and evaluate goodness of fit
        B0 = repmat(t, 1, p + 1);
        B0 = B0 .^ u0 .* (1 - B0) .^ v0;
        B0 = B0 .* b0;
        X = B0 \ x;
        res = B0 * X - x;
        
        % Initialise Newton-Raphson search
        iter = 0;
        old = 0;
        while norm(res - old) / max(1, norm(res)) > tol

            % Derivative of the Bézier fit
            B1 = repmat(t, 1, p);
            B1 = B1 .^ u1 .* (1 - B1) .^ v1;
            B1 = B1 .* b1;
            B1 = p * B1 * diff(X);

            % Knot vector permutation
            t = t - sum(B1 .* res, 2) ./ sum(B1 .* B1, 2);
            t = t - min(t);
            t = t / max(t);

            % Re-assessment of the curve fitting quality
            B0 = repmat(t, 1, b);
            B0 = B0 .^ u0 .* (1 - B0) .^ v0;
            B0 = B0 .* b0;

            X = B0 \ x;
            old = res;
            res = B0 * X - x;

            % Counter for exit condition
            iter = iter + 1;
            if iter == maxiter
                break
            end
        end
        
        % Correct linear transformation
        X = X * y;
        
    % Logarithmic fitting if ill-conditioned systems
    else
        
        % Linear transformation of points to avoid conversion to real
        y = 1 + min(x(:));
        x = x + y;
        
        % Logarithmic binomial coefficients
        b0 = lgm(b);
        b1 = lgm(p);
        
        % Get logarithmic factor vectors
        u0 = 1 : a;
        v0 = a : -1 : 1;
        u1 = 1 : c;
        v1 = c : -1 : 1;
        
        % Initialise Bernstein Matrix and evaluate goodness of fit
        B0 = zeros(n, b);
        B0(:, 1) = (1 - t) .^ p;
        B0(:, b) = t .^ p;
        B0(:, 2 : p) = exp(b0 + log(t) .* u0 + log(1 - t) .* v0);
        X = B0 \ x;
        res = B0 * X - x;
        
        % Initialise Newton-Raphson search
        iter = 0;
        old = 0;
        B1 = zeros(n, p);
        while norm(res - old) / max(1, norm(res)) > tol

            % Derivative of the Bézier fit
            B1(:, 1) = (1 - t) .^ a;
            B1(:, p) = t .^ a;
            B1(:, 2 : a) = exp(b1 + log(t) .* u1 + log(1 - t) .* v1);
            B1 = p * B1 * diff(X);

            % Knot vector permutation
            t = t - sum(B1 .* res, 2) ./ sum(B1 .* B1, 2);
            t = (t - min(t)) / (max(t) - min(t));

            % Re-assessment of the curve fitting quality
            B0(:, 1) = (1 - t) .^ p;
            B0(:, b) = t .^ p;
            B0(:, 2 : p) = exp(b0 + log(t) .* u0 + log(1 - t) .* v0);

            X = B0 \ x;
            old = res;
            res = B0 * X - x;

            % Counter for exit condition
            iter = iter + 1;
            if iter == maxiter
                break
            end
        end
        
        % Correct linear transformation
        X = X - y;
    end
    if s
        X = bsplkin(X, s);
    end
    res = norm(res);
end

% Binomial Coefficient Calculation Methods
function b = pas(n)
    b = zeros(n);
    for i = 1 : n
        j = i - 1;
        b(i, 1) = 1;
        b(i, i) = 1;
        for k = 2 : j
            b(i, k) = b(j, k - 1) + b(j, k);
        end
    end
end
function b = nes(n)
    p = n + 1;
    q = p + 1;
    b = ones(1, p);
    for i = 2 : n
        if i > q / 2
            b(i) = b(q - i);
        else
            b(i) = n;
            for j = 2 : i - 1
               b(i) = b(i) * (p - j) / j;
            end
        end
    end
end
function b = lut(n)
    b = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57;666,703,741,780,820,861,903,946,990,1035,1081,1128,1176,1225,1275,1326,1378,1431,1485,1540,1596;7770,8436,9139,9880,10660,11480,12341,13244,14190,15180,16215,17296,18424,19600,20825,22100,23426,24804,26235,27720,29260;66045,73815,82251,91390,101270,111930,123410,135751,148995,163185,178365,194580,211876,230300,249900,270725,292825,316251,341055,367290,395010;435897,501942,575757,658008,749398,850668,962598,1086008,1221759,1370754,1533939,1712304,1906884,2118760,2349060,2598960,2869685,3162510,3478761,3819816,4187106;2324784,2760681,3262623,3838380,4496388,5245786,6096454,7059052,8145060,9366819,10737573,12271512,13983816,15890700,18009460,20358520,22957480,25827165,28989675,32468436,36288252;10295472,12620256,15380937,18643560,22481940,26978328,32224114,38320568,45379620,53524680,62891499,73629072,85900584,99884400,115775100,133784560,154143080,177100560,202927725,231917400,264385836;38608020,48903492,61523748,76904685,95548245,118030185,145008513,177232627,215553195,260932815,314457495,377348994,450978066,536878650,636763050,752538150,886322710,1040465790.00000,1217566350.00000,1420494075.00000,1652411475.00000;124403620,163011640,211915132,273438880,350343565,445891810,563921995,708930508,886163135,1101716330.00000,1362649145.00000,1677106640.00000,2054455634.00000,2505433700.00000,3042312350.00000,3679075400.00000,4431613550.00000,5317936260.00000,6358402050.00000,7575968400.00000,8996462475.00000;348330136,472733756,635745396,847660528,1121099408.00000,1471442973.00000,1917334783.00000,2481256778.00000,3190187286.00000,4076350421.00000,5178066751.00000,6540715896.00000,8217822536.00000,10272278170.0000,12777711870.0000,15820024220.0000,19499099620.0000,23930713170.0000,29248649430.0000,35607051480.0000,43183019880.0000;854992152,1203322288.00000,1676056044.00000,2311801440.00000,3159461968.00000,4280561376.00000,5752004349.00000,7669339132.00000,10150595910.0000,13340783196.0000,17417133617.0000,22595200368.0000,29135916264.0000,37353738800.0000,47626016970.0000,60403728840.0000,76223753060.0000,95722852680.0000,119653565850.000,148902215280.000,184509266760.000;1852482996.00000,2707475148.00000,3910797436.00000,5586853480.00000,7898654920.00000,11058116888.0000,15338678264.0000,21090682613.0000,28760021745.0000,38910617655.0000,52251400851.0000,69668534468.0000,92263734836.0000,121399651100.000,158753389900.000,206379406870.000,266783135710.000,343006888770.000,438729741450.000,558383307300.000,707285522580.000;3562467300.00000,5414950296.00000,8122425444.00000,12033222880.0000,17620076360.0000,25518731280.0000,36576848168.0000,51915526432.0000,73006209045.0000,101766230790.000,140676848445.000,192928249296.000,262596783764.000,354860518600.000,476260169700.000,635013559600.000,841392966470.000,1108176102180.00,1451182990950.00,1889912732400.00,2448296039700.00;6107086800.00000,9669554100.00000,15084504396.0000,23206929840.0000,35240152720.0000,52860229080.0000,78378960360.0000,114955808528.000,166871334960.000,239877544005.000,341643774795.000,482320623240.000,675248872536.000,937845656300.000,1292706174900.00,1768966344600.00,2403979904200.00,3245372870670.00,4353548972850.00,5804731963800.00,7694644696200.00;9364199760.00000,15471286560.0000,25140840660.0000,40225345056.0000,63432274896.0000,98672427616.0000,151532656696.000,229911617056.000,344867425584.000,511738760544.000,751616304549.000,1093260079344.00,1575580702584.00,2250829575120.00,3188675231420.00,4481381406320.00,6250347750920.00,8654327655120.00,11899700525790.0,16253249498640.0,22057981462440.0;12875774670.0000,22239974430.0000,37711260990.0000,62852101650.0000,103077446706.000,166509721602.000,265182149218.000,416714805914.000,646626422970.000,991493848554.000,1503232609098.00,2254848913647.00,3348108992991.00,4923689695575.00,7174519270695.00,10363194502115.0,14844575908435.0,21094923659355.0,29749251314475.0,41648951840265.0,57902201338905.0;15905368710.0000,28781143380.0000,51021117810.0000,88732378800.0000,151584480450.000,254661927156.000,421171648758.000,686353797976.000,1103068603890.00,1749695026860.00,2741188875414.00,4244421484512.00,6499270398159.00,9847379391150.00,14771069086725.0,21945588357420.0,32308782859535.0,47153358767970.0,68248282427325.0,97997533741800.0,139646485582065;17672631900.0000,33578000610.0000,62359143990.0000,113380261800.000,202112640600.000,353697121050.000,608359048206.000,1029530696964.00,1715884494940.00,2818953098830.00,4568648125690.00,7309837001104.00,11554258485616.0,18053528883775.0,27900908274925.0,42671977361650.0,64617565719070.0,96926348578605.0,144079707346575,212327989773900,310325523515700;17672631900.0000,35345263800.0000,68923264410.0000,131282408400.000,244662670200.000,446775310800.000,800472431850.000,1408831480056.00,2438362177020.00,4154246671960.00,6973199770790.00,11541847896480.0,18851684897584.0,30405943383200.0,48459472266975.0,76360380541900.0,119032357903550,183649923622620,280576272201225,424655979547800,636983969321700;15905368710.0000,33578000610.0000,68923264410.0000,137846528820.000,269128937220.000,513791607420.000,960566918220.000,1761039350070.00,3169870830126.00,5608233007146.00,9762479679106.00,16735679449896.0,28277527346376.0,47129212243960.0,77535155627160.0,125994627894135,202355008436035,321387366339585,505037289962205,785613562163430,1.21026954171123e+15;12875774670.0000,28781143380.0000,62359143990.0000,131282408400.000,269128937220.000,538257874440.000,1052049481860.00,2012616400080.00,3773655750150.00,6943526580276.00,12551759587422.0,22314239266528.0,39049918716424.0,67327446062800.0,114456658306760,191991813933920,317986441828055,520341450264090,841728816603675,1.34676610656588e+15,2.13237966872931e+15;9364199760.00000,22239974430.0000,51021117810.0000,113380261800.000,244662670200.000,513791607420.000,1052049481860.00,2104098963720.00,4116715363800.00,7890371113950.00,14833897694226.0,27385657281648.0,49699896548176.0,88749815264600.0,156077261327400,270533919634160,462525733568080,780512175396135,1.30085362566023e+15,2.14258244226390e+15,3.48934854882978e+15;6107086800.00000,15471286560.0000,37711260990.0000,88732378800.0000,202112640600.000,446775310800.000,960566918220.000,2012616400080.00,4116715363800.00,8233430727600.00,16123801841550.0,30957699535776.0,58343356817424.0,108043253365600,196793068630200,352870329957600,623404249591760,1.08592998315984e+15,1.86644215855598e+15,3.16729578421620e+15,5.30987822648010e+15;3562467300.00000,9669554100.00000,25140840660.0000,62852101650.0000,151584480450.000,353697121050.000,800472431850.000,1761039350070.00,3773655750150.00,7890371113950.00,16123801841550.0,32247603683100.0,63205303218876.0,121548660036300,229591913401900,426384982032100,779255311989700,1.40265956158146e+15,2.48858954474130e+15,4.35503170329728e+15,7.52232748751348e+15;1852482996.00000,5414950296.00000,15084504396.0000,40225345056.0000,103077446706.000,254661927156.000,608359048206.000,1408831480056.00,3169870830126.00,6943526580276.00,14833897694226.0,30957699535776.0,63205303218876.0,126410606437752,247959266474052,477551179875952,903936161908052,1.68319147389775e+15,3.08585103547921e+15,5.57444058022051e+15,9.92947228351779e+15;854992152,2707475148.00000,8122425444.00000,23206929840.0000,63432274896.0000,166509721602.000,421171648758.000,1029530696964.00,2438362177020.00,5608233007146.00,12551759587422.0,27385657281648.0,58343356817424.0,121548660036300,247959266474052,495918532948104,973469712824056,1.87740587473211e+15,3.56059734862986e+15,6.64644838410907e+15,1.22208889643296e+16;348330136,1203322288.00000,3910797436.00000,12033222880.0000,35240152720.0000,98672427616.0000,265182149218.000,686353797976.000,1715884494940.00,4154246671960.00,9762479679106.00,22314239266528.0,49699896548176.0,108043253365600,229591913401900,477551179875952,973469712824056,1.94693942564811e+15,3.82434530038022e+15,7.38494264901008e+15,1.40313910331192e+16;124403620,472733756,1676056044.00000,5586853480.00000,17620076360.0000,52860229080.0000,151532656696.000,416714805914.000,1103068603890.00,2818953098830.00,6973199770790.00,16735679449896.0,39049918716424.0,88749815264600.0,196793068630200,426384982032100,903936161908052,1.87740587473211e+15,3.82434530038022e+15,7.64869060076044e+15,1.50336332497705e+16;38608020,163011640,635745396,2311801440.00000,7898654920.00000,25518731280.0000,78378960360.0000,229911617056.000,646626422970.000,1749695026860.00,4568648125690.00,11541847896480.0,28277527346376.0,67327446062800.0,156077261327400,352870329957600,779255311989700,1.68319147389775e+15,3.56059734862986e+15,7.38494264901008e+15,1.50336332497705e+16;10295472,48903492,211915132,847660528,3159461968.00000,11058116888.0000,36576848168.0000,114955808528.000,344867425584.000,991493848554.000,2741188875414.00,7309837001104.00,18851684897584.0,47129212243960.0,114456658306760,270533919634160,623404249591760,1.40265956158146e+15,3.08585103547921e+15,6.64644838410907e+15,1.40313910331192e+16;2324784,12620256,61523748,273438880,1121099408.00000,4280561376.00000,15338678264.0000,51915526432.0000,166871334960.000,511738760544.000,1503232609098.00,4244421484512.00,11554258485616.0,30405943383200.0,77535155627160.0,191991813933920,462525733568080,1.08592998315984e+15,2.48858954474130e+15,5.57444058022051e+15,1.22208889643296e+16;435897,2760681,15380937,76904685,350343565,1471442973.00000,5752004349.00000,21090682613.0000,73006209045.0000,239877544005.000,751616304549.000,2254848913647.00,6499270398159.00,18053528883775.0,48459472266975.0,125994627894135,317986441828055,780512175396135,1.86644215855598e+15,4.35503170329728e+15,9.92947228351779e+15;66045,501942,3262623,18643560,95548245,445891810,1917334783.00000,7669339132.00000,28760021745.0000,101766230790.000,341643774795.000,1093260079344.00,3348108992991.00,9847379391150.00,27900908274925.0,76360380541900.0,202355008436035,520341450264090,1.30085362566023e+15,3.16729578421620e+15,7.52232748751348e+15;7770,73815,575757,3838380,22481940,118030185,563921995,2481256778.00000,10150595910.0000,38910617655.0000,140676848445.000,482320623240.000,1575580702584.00,4923689695575.00,14771069086725.0,42671977361650.0,119032357903550,321387366339585,841728816603675,2.14258244226390e+15,5.30987822648010e+15;666,8436,82251,658008,4496388,26978328,145008513,708930508,3190187286.00000,13340783196.0000,52251400851.0000,192928249296.000,675248872536.000,2250829575120.00,7174519270695.00,21945588357420.0,64617565719070.0,183649923622620,505037289962205,1.34676610656588e+15,3.48934854882978e+15;37,703,9139,91390,749398,5245786,32224114,177232627,886163135,4076350421.00000,17417133617.0000,69668534468.0000,262596783764.000,937845656300.000,3188675231420.00,10363194502115.0,32308782859535.0,96926348578605.0,280576272201225,785613562163430,2.13237966872931e+15;1,38,741,9880,101270,850668,6096454,38320568,215553195,1101716330.00000,5178066751.00000,22595200368.0000,92263734836.0000,354860518600.000,1292706174900.00,4481381406320.00,14844575908435.0,47153358767970.0,144079707346575,424655979547800,1.21026954171123e+15;0,1,39,780,10660,111930,962598,7059052,45379620,260932815,1362649145.00000,6540715896.00000,29135916264.0000,121399651100.000,476260169700.000,1768966344600.00,6250347750920.00,21094923659355.0,68248282427325.0,212327989773900,636983969321700;0,0,1,40,820,11480,123410,1086008,8145060,53524680,314457495,1677106640.00000,8217822536.00000,37353738800.0000,158753389900.000,635013559600.000,2403979904200.00,8654327655120.00,29749251314475.0,97997533741800.0,310325523515700;0,0,0,1,41,861,12341,135751,1221759,9366819,62891499,377348994,2054455634.00000,10272278170.0000,47626016970.0000,206379406870.000,841392966470.000,3245372870670.00,11899700525790.0,41648951840265.0,139646485582065;0,0,0,0,1,42,903,13244,148995,1370754,10737573,73629072,450978066,2505433700.00000,12777711870.0000,60403728840.0000,266783135710.000,1108176102180.00,4353548972850.00,16253249498640.0,57902201338905.0;0,0,0,0,0,1,43,946,14190,163185,1533939,12271512,85900584,536878650,3042312350.00000,15820024220.0000,76223753060.0000,343006888770.000,1451182990950.00,5804731963800.00,22057981462440.0;0,0,0,0,0,0,1,44,990,15180,178365,1712304,13983816,99884400,636763050,3679075400.00000,19499099620.0000,95722852680.0000,438729741450.000,1889912732400.00,7694644696200.00;0,0,0,0,0,0,0,1,45,1035,16215,194580,1906884,15890700,115775100,752538150,4431613550.00000,23930713170.0000,119653565850.000,558383307300.000,2448296039700.00;0,0,0,0,0,0,0,0,1,46,1081,17296,211876,2118760,18009460,133784560,886322710,5317936260.00000,29248649430.0000,148902215280.000,707285522580.000;0,0,0,0,0,0,0,0,0,1,47,1128,18424,230300,2349060,20358520,154143080,1040465790.00000,6358402050.00000,35607051480.0000,184509266760.000;0,0,0,0,0,0,0,0,0,0,1,48,1176,19600,249900,2598960,22957480,177100560,1217566350.00000,7575968400.00000,43183019880.0000;0,0,0,0,0,0,0,0,0,0,0,1,49,1225,20825,270725,2869685,25827165,202927725,1420494075.00000,8996462475.00000;0,0,0,0,0,0,0,0,0,0,0,0,1,50,1275,22100,292825,3162510,28989675,231917400,1652411475.00000;0,0,0,0,0,0,0,0,0,0,0,0,0,1,51,1326,23426,316251,3478761,32468436,264385836;0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,52,1378,24804,341055,3819816,36288252;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,53,1431,26235,367290,4187106;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,54,1485,27720,395010;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,55,1540,29260;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,56,1596;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,57;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1];
    b = b(1 : n, n - 37)';
end
function b = lgm(n)
    b = gammaln(n) - gammaln(1 : n) - gammaln(n : -1 : 1);
    b([1, n]) = [];
end